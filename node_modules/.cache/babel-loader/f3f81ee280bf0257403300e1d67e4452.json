{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\my-app\\\\src\\\\context\\\\mainContext.js\";\nimport React, { Component, useState, useEffect } from 'react';\nexport const mainContext = React.createContext();\n\nconst MainContextProvider = props => {\n  const checkadmin = localStorage.getItem('admin');\n  const token = localStorage.getItem('token');\n  const user = localStorage.getItem('user');\n  console.log(token, 'ppppppp');\n  useEffect(() => {\n    // settoken(localStorage.getItem('token'))\n    setadmin(checkadmin);\n    setuserid(user);\n    fetch('http://localhost:3000/auth/login/token', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'headers': token\n      }\n    }).then(async response => {\n      const data = await response.json();\n      const status = await response.status;\n\n      if (status == 200) {\n        setlogin(true);\n        setusername(data.name);\n        setadmin(data.admin);\n      } else {\n        setlogin(false);\n      }\n    });\n  }, []);\n\n  const towns = text => {\n    setcustomertowns(text);\n    setshowtown(!showtown);\n  };\n\n  const citys = text => {\n    setcustomercity(text);\n    setshowcity(!showcity);\n  };\n\n  const show = () => {\n    setshowtown(false);\n    setshowcity(false);\n  };\n\n  return React.createElement(mainContext.Provider, {\n    value: {\n      login,\n      username,\n      admin,\n      userid,\n      towns,\n      customertowns,\n      showtown,\n      customercity,\n      showcity,\n      citys,\n      show\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MainContextProvider;","map":{"version":3,"sources":["C:/wamp64/www/my-app/src/context/mainContext.js"],"names":["React","Component","useState","useEffect","mainContext","createContext","MainContextProvider","props","checkadmin","localStorage","getItem","token","user","console","log","setadmin","setuserid","fetch","method","headers","then","response","data","json","status","setlogin","setusername","name","admin","towns","text","setcustomertowns","setshowtown","showtown","citys","setcustomercity","setshowcity","showcity","show","login","username","userid","customertowns","customercity","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAO,MAAMC,WAAW,GAACJ,KAAK,CAACK,aAAN,EAAlB;;AACP,MAAMC,mBAAmB,GAAEC,KAAD,IAAS;AACjC,QAAMC,UAAU,GAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjB;AACA,QAAMC,KAAK,GAACF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,QAAME,IAAI,GAACH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkB,SAAlB;AACAR,EAAAA,SAAS,CAAC,MAAI;AACZ;AACAY,IAAAA,QAAQ,CAACP,UAAD,CAAR;AACAQ,IAAAA,SAAS,CAACJ,IAAD,CAAT;AACAK,IAAAA,KAAK,CAAC,wCAAD,EAA0C;AAC7CC,MAAAA,MAAM,EAAC,MADsC;AAE7CC,MAAAA,OAAO,EAAC;AACN,kBAAS,kBADH;AAEN,wBAAgB,mCAFV;AAGN,mBAAUR;AAHJ;AAFqC,KAA1C,CAAL,CAOCS,IAPD,CAOM,MAAOC,QAAP,IAAkB;AACxB,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AACA,YAAMC,MAAM,GAAC,MAAMH,QAAQ,CAACG,MAA5B;;AAEA,UAAGA,MAAM,IAAE,GAAX,EAAe;AAEbC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAC,QAAAA,WAAW,CAACJ,IAAI,CAACK,IAAN,CAAX;AACAZ,QAAAA,QAAQ,CAACO,IAAI,CAACM,KAAN,CAAR;AAED,OAND,MAMK;AACHH,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACH,KApBE;AAoBA,GAxBO,EAwBN,EAxBM,CAAT;;AA2BA,QAAMI,KAAK,GAAEC,IAAD,IAAQ;AACtBC,IAAAA,gBAAgB,CAACD,IAAD,CAAhB;AACAE,IAAAA,WAAW,CAAC,CAACC,QAAF,CAAX;AACG,GAHD;;AAIA,QAAMC,KAAK,GAAEJ,IAAD,IAAQ;AAClBK,IAAAA,eAAe,CAACL,IAAD,CAAf;AACAM,IAAAA,WAAW,CAAC,CAACC,QAAF,CAAX;AACG,GAHL;;AAIE,QAAOC,IAAI,GAAC,MAAI;AACdN,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHD;;AAKA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACG,MAAAA,KAAD;AAAOC,MAAAA,QAAP;AAAgBZ,MAAAA,KAAhB;AAAsBa,MAAAA,MAAtB;AAA6BZ,MAAAA,KAA7B;AAC7Ba,MAAAA,aAD6B;AACfT,MAAAA,QADe;AACNU,MAAAA,YADM;AACON,MAAAA,QADP;AACgBH,MAAAA,KADhB;AACsBI,MAAAA;AADtB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGG/B,KAAK,CAACqC,QAHT,CADJ;AAOH,CApDD;;AAuDA,eAAetC,mBAAf","sourcesContent":["import React, { Component,useState,useEffect } from 'react';\r\nexport const mainContext=React.createContext();\r\nconst MainContextProvider=(props)=>{\r\n  const checkadmin=localStorage.getItem('admin');\r\n  const token=localStorage.getItem('token');\r\n  const user=localStorage.getItem('user');\r\n  console.log(token,'ppppppp')\r\n  useEffect(()=>{\r\n    // settoken(localStorage.getItem('token'))\r\n    setadmin(checkadmin)\r\n    setuserid(user)\r\n    fetch('http://localhost:3000/auth/login/token',{\r\n      method:'POST',\r\n      headers:{\r\n        'Accept':'application/json',\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'headers':token\r\n      },\r\n  }).then(async (response)=>{\r\n    const data = await response.json();\r\n    const status=await response.status;\r\n   \r\n    if(status==200){\r\n\r\n      setlogin(true)\r\n      setusername(data.name)\r\n      setadmin(data.admin)\r\n\r\n    }else{\r\n      setlogin(false)\r\n    }\r\n })},[])\r\n\r\n\r\n  const towns=(text)=>{\r\nsetcustomertowns(text)\r\nsetshowtown(!showtown)\r\n  }\r\n  const citys=(text)=>{\r\n    setcustomercity(text)\r\n    setshowcity(!showcity)\r\n      }\r\n    const  show=()=>{\r\n      setshowtown(false)\r\n      setshowcity(false)\r\n    }\r\n \r\n    return(\r\n        <mainContext.Provider value={{login,username,admin,userid,towns,\r\n        customertowns,showtown,customercity,showcity,citys,show\r\n        }}>\r\n          {props.children}\r\n        </mainContext.Provider>\r\n    )\r\n}\r\n \r\n\r\nexport default MainContextProvider;"]},"metadata":{},"sourceType":"module"}